the Telmac 1800 was a microcomputer from the 70's 
the original kits later came included with an alphanumberic video display and up to 12 kB of memory
4kB Tiny BASIC can be run on it. 
it was one of hte first computers to run a chip8 interpreter

what my system has:
4K memory
64x32 1-bit display
sound = beeps

implemented via a virtual machine
my 16 frame stack:
    16 8-bit registers (V0 - VF)
    12-bit index register (I)
    PC (Program Counter)
    2 8-bit timers
-See below for image interpretation-

0x000 |--------------------|
      | Interpreter memory |
      |                    |
0x050 | Built-in fontset   |
0x200 |--------------------|
      |                    |
      |                    |
      | Program memory     |
      | and dynamic allocs |
      |                    |
      |                    |
0xFFF |--------------------|


we'll encapsulate our image memory and operations in an Image class and the 64x32 frame will 
be represented as a single chunk of data memoryeach pixel will be a single byte

0x000:|--------------------------------------------------------------|
0x040:|                                                              |
0x080:|                                                              |
0x0C0:|                                                              |
      ...
0x7C0:|--------------------------------------------------------------|

This will be our display we need to make sure to keep track of the 
columns and rows and we'll use malloc to keep track of the starting address of the image memory
it should point to the top left corner of the memory 

#drawing to the console
all drawing is done by xor operation 
all sprites are defined as images with a depth of 1-bit a width of 8 and variable height
width limitation is becasue the sprite is only 1 bit
so for example:

0xF0, 0x90, 0x90, 0x90, 0xF0, // 0

0xF0 is 1111 0000 -> XXXX
0x90 is 1001 0000 -> X  X
0x90 is 1001 0000 -> X  X
0x90 is 1001 0000 -> X  X
0xF0 is 1111 0000 -> XXXX

the reason you see flickering in chip8 programs screen is becasue
of the operation used for the sprites
are drawn over oneanother
so that is why we use the xor operation

MSbit to LSbit