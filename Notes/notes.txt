the Telmac 1800 was a microcomputer from the 70's 
the original kits later came included with an alphanumberic video display and up to 12 kB of memory
4kB Tiny BASIC can be run on it. 
it was one of hte first computers to run a chip8 interpreter

what my system has:
4K memory
64x32 1-bit display
sound = beeps

implemented via a virtual machine
my 16 frame stack:
    16 8-bit registers (V0 - VF)
    12-bit index register (I)
    PC (Program Counter)
    2 8-bit timers
-See below for image interpretation-

0x000 |--------------------|
      | Interpreter memory |
      |                    |
0x050 | Built-in fontset   |
0x200 |--------------------|
      |                    |
      |                    |
      | Program memory     |
      | and dynamic allocs |
      |                    |
      |                    |
0xFFF |--------------------|


we'll encapsulate our image memory and operations in an Image class and the 64x32 frame will 
be represented as a single chunk of data memoryeach pixel will be a single byte

0x000:|--------------------------------------------------------------|
0x040:|                                                              |
0x080:|                                                              |
0x0C0:|                                                              |
      ...
0x7C0:|--------------------------------------------------------------|

This will be our display we need to make sure to keep track of the 
columns and rows and we'll use malloc to keep track of the starting address of the image memory
it should point to the top left corner of the memory 

#drawing to the console
all drawing is done by xor operation 
all sprites are defined as images with a depth of 1-bit a width of 8 and variable height
width limitation is becasue the sprite is only 1 bit
so for example:

0xF0, 0x90, 0x90, 0x90, 0xF0, // 0

0xF0 is 1111 0000 -> XXXX
0x90 is 1001 0000 -> X  X
0x90 is 1001 0000 -> X  X
0x90 is 1001 0000 -> X  X
0xF0 is 1111 0000 -> XXXX

the reason you see flickering in chip8 programs screen is becasue
of the operation used for the sprites
are drawn over oneanother
so that is why we use the xor operation

//Image.cpp NOtes:
//we will use drawto std out for now sp we can draw graphically to the console
// just until we set up the actual output


//see notes at #drawing to the console
//the interpreter also need to recieve back whether ot not  a pixel was turned off
// this i sused for collision detection
//remmeber that we xor to draw over with the sprites

//we have to be precise whether we extract the bits as 1 or 0
// our image class supports 0 - 255 our XOR's could 
//get messy without the restriction
//now we just need to extract the parameters needed to call XORSprite



WIKI OPCODES FOR CHIP_8 ---------------------------------------------------------
NNN = address
NN = 8-bit constant
N = 4-bit constant
X and Y = 4 bit register identifier
PC = program Counter
I = 16 bit register for memory
VN = one of the 16 available variables N may be 0 to F


0NNN	      ||Call	||Calls machine code routine (RCA 1802 for COSMAC VIP) at address NNN. Not necessary for most ROMs.

2NNN	      ||Flow	||*(0xNNN)()	Calls subroutine at NNN.

FX15	      ||Timer	||delay_timer(Vx)	Sets the delay timer to VX.

00E0	      ||Display	||disp_clear()	Clears the screen.

DXYN	      ||Display	||draw(Vx, Vy, N)	      ||Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of N pixels. Each row of 8 pixels is read as bit-coded starting from memory location I; I value does not change after the execution of this instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that does not happen.
1NNN	      ||Flow	||goto NNN;	            ||Jumps to address NNN.
FX1E	      ||MEM	      ||I += Vx	            ||Adds VX to I. VF is not affected.[c]
ANNN	      ||MEM	      ||I = NNN	            ||Sets I to the address NNN.
FX29	      ||MEM	      ||I = sprite_addr[Vx]	||Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font.
EXA1	      ||KeyOp	||if (key() != Vx)	||Skips the next instruction if the key stored in VX is not pressed (usually the next instruction is a jump to skip a code block).
EX9E	      ||KeyOp	||if (key() == Vx)	||Skips the next instruction if the key stored in VX is pressed (usually the next instruction is a jump to skip a code block).
4XNN	      ||Cond	||if (Vx != NN)	      ||Skips the next instruction if VX does not equal NN (usually the next instruction is a jump to skip a code block).
9XY0	      ||Cond	||if (Vx != Vy)	      ||Skips the next instruction if VX does not equal VY. (Usually the next instruction is a jump to skip a code block);
3XNN	      ||Cond	||if (Vx == NN)	      ||Skips the next instruction if VX equals NN (usually the next instruction is a jump to skip a code block).
5XY0	      ||Cond	||if (Vx == Vy)	      ||Skips the next instruction if VX equals VY (usually the next instruction is a jump to skip a code block).
BNNN	      ||Flow	||PC = V0 + NNN	      ||Jumps to the address NNN plus V0.
FX55	      ||MEM	      ||reg_dump(Vx, &I)	||Stores from V0 to VX (including VX) in memory, starting at address I. The offset from I is increased by 1 for each value written, but I itself is left unmodified.[d]
FX65	      ||MEM	      ||reg_load(Vx, &I)	||Fills from V0 to VX (including VX) with values from memory, starting at address I. The offset from I is increased by 1 for each value read, but I itself is left unmodified.[d]
00EE	      ||Flow	||return;	            ||Returns from a subroutine.
FX33	      ||BCD	      ||set_BCD(Vx)           ||Stores the binary-coded decimal representation of VX, with the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.
                        ||*(I+0) = BCD(3);
                        ||*(I+1) = BCD(2);
                        ||*(I+2) = BCD(1);

FX18	      ||Sound	||sound_timer(Vx)	      ||Sets the sound timer to VX.
8XY5	      ||Math	||Vx -= Vy	            ||VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there is not.
8XY2	      ||BitOp	||Vx &= Vy	            ||Sets VX to VX and VY. (bitwise AND operation)
8XY3[a]	||BitOp	||Vx ^= Vy	            ||Sets VX to VX xor VY.
7XNN	      ||Const	||Vx += NN	            ||Adds NN to VX (carry flag is not changed).
8XY4	      ||Math	||Vx += Vy	            ||Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there is not.
8XYE[a]	||BitOp	||Vx <<= 1	            ||Stores the most significant bit of VX in VF and then shifts VX to the left by 1.[b]
FX07	      ||Timer	||Vx = get_delay()	||Sets VX to the value of the delay timer.
FX0A	      ||KeyOp	||Vx = get_key()	      ||A key press is awaited, and then stored in VX (blocking operation, all instruction halted until next key event).
6XNN	      ||Const	||Vx = NN	            ||Sets VX to NN.
CXNN	      ||Rand	||Vx = rand() & NN	||Sets VX to the result of a bitwise and operation on a random number (Typically: 0 to 255) and NN.
8XY0	      ||Assig	||Vx = Vy	            ||Sets VX to the value of VY.
8XY7[a]	||Math	||Vx = Vy - Vx	      ||Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there is not.
8XY6[a]	||BitOp	||Vx >>= 1	            ||Stores the least significant bit of VX in VF and then shifts VX to the right by 1.[b]
8XY1	      ||BitOp	||Vx |= Vy	            ||Sets VX to VX or VY. (bitwise OR operation)


My repo C++ Equivalents
//
      //
            //1. 0x0000 = 0NNN - Calls RCA 1802 program at address NNN.
            //2. 00E0 - Clears the screen.
            //3. 00EE - Returns from a subroutine.
            //4. 1000= 1NNN - Jumps to address NNN.
            //5. 2000= 2NNN - Calls subroutine at NNN.
            //6. 3000 = 3XNN - Skips the next instruction if VX equals NN.
            //7. 4000 =4XNN - Skips the next instruction if VX doesn't equal NN.
            //8. 5000 = 5XY0 - Skips the next instruction if VX equals VY.
            //9. 6000 = 6XNN - Sets VX to NN.
            //10. 7000 = 7XNN - Adds NN to VX.
      can be nested into a 8000 switch case
            11. 8XY0 - Sets VX to the value of VY.
            12. 0001 = 8XY1 - Sets VX to VX or VY.
            13. 0002 = 8XY2 - Sets VX to VX and VY.
            14. 0003 = 8XY3 - Sets VX to VX xor VY.
            15. 0004 = 8XY4 - Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there isn't.
            16. 0005 = 8XY5 - VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there isn't.
            17. 0006 = 8XY6 - Shifts VX right by one. VF is set to the value of the least significant bit of VX before the shift.
            18. 0007 = 8XY7 - Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there isn't.
            19. 000E = 8XYE - Shifts VX left by one. VF is set to the value of the most significant bit of VX before the shift.
      //
            //20. 9000 = 9XY0 - Skips the next instruction if VX doesn't equal VY.
            //21. A000 = ANNN - Sets I to the address NNN.
            //22. BNNN - Jumps to the address NNN plus V0.
            //23. CXNN - Sets VX to a random number and NN.
            //24. D000 = DXYN - Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of N pixels. Each row of 8 pixels is read as bit-coded starting from memory location I; I value doesn’t change after the execution of this instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that doesn’t happen
      //E:
            25. EX9E - Skips the next instruction if the key stored in VX is pressed.
            26. EXA1 - Skips the next instruction if the key stored in VX isn't pressed.
      //F:
            //27. FX07 - Sets VX to the value of the delay timer.
            //28. FX0A - A key press is awaited, and then stored in VX.
            //29. FX15 - Sets the delay timer to VX.
            //30. FX18 - Sets the sound timer to VX.
            //31. FX1E - Adds VX to I.
            //32. FX29 - Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font.
            //33. FX33 - Stores the binary-coded decimal representation of VX, with the most significant of three digits at the address in I, the middle digit at I plus 1, and the least significant digit at I plus 2. (In other words, take the decimal representation of VX, place the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.)
            //34. FX55 - Stores V0 to VX in memory starting at address I.
            //35. FX65 - Fills V0 to VX with values from memory starting at address I.





